using HFYStorySorter.Data;
using HFYStorySorter.Models;
using Microsoft.EntityFrameworkCore;
using System.Text.RegularExpressions;

namespace HFYStorySorter.Services
{
    public class StorySorterService : BackgroundService
    {
        private readonly ILogger<StorySorterService> _logger;
        private readonly IServiceProvider _serviceProvider;
        private readonly ServiceStatus _status;

        public StorySorterService(IServiceProvider serviceProvider, ILogger<StorySorterService> logger, ServiceStatus status)
        {
            _serviceProvider = serviceProvider;
            _logger = logger;
            _status = status;
        }

        protected override async Task ExecuteAsync(CancellationToken cancellationToken)
        {
            _logger.LogInformation("StorySorterService starting");
            _status.IsStorySorterRunning = true;

            try
            {
                while (!cancellationToken.IsCancellationRequested)
                {
                    await SortUnprocessedPostsAsync(cancellationToken);
                    //todo make the time configurable
                    await Task.Delay(TimeSpan.FromMinutes(5), cancellationToken);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error sorting posts");
            }
            finally
            {
                _logger.LogInformation("StorySorterService is stopping");
                _status.IsStorySorterRunning = false;
            }
        }

        private async Task SortUnprocessedPostsAsync(CancellationToken cancellationToken)
        {
            _logger.LogInformation("Sorting unprocessed posts...");

            using var scope = _serviceProvider.CreateScope();
            var dbContext = scope.ServiceProvider.GetRequiredService<AppDbContext>();

            var unprocessedPosts = await dbContext.Posts
            .Where(p => !p.IsProcessed)
            .ToListAsync(cancellationToken);

            _logger.LogInformation("Found {Count} unprocessed posts", unprocessedPosts.Count);

            var newStoriesThisRun = new Dictionary<string, Story>(StringComparer.OrdinalIgnoreCase);

            foreach (var post in unprocessedPosts)
            {
                var (storyTitle, chapterNumber) = GetStoryInfo(post.Title);

                if (string.IsNullOrEmpty(storyTitle))
                {
                    _logger.LogWarning("Post {Id} has no valid story title: {Title}", post.Id, post.Title);
                    continue;
                }

                Story? story = null;
                if (newStoriesThisRun.ContainsKey(storyTitle))
                {
                    story = newStoriesThisRun[storyTitle];
                }
                else
                {

                    story = await dbContext.Stories
                        .Include(s => s.Chapters)
                        .FirstOrDefaultAsync(s => s.StoryName.ToLower() == storyTitle.ToLower(), cancellationToken);

                    if (story == null)
                    {
                        story = new Story
                        {
                            StoryName = storyTitle,
                            Chapters = new List<Chapter>(),
                            CreatedUtc = DateTime.UtcNow
                        };

                        dbContext.Stories.Add(story);
                        _logger.LogInformation("Created new story: {StoryName}", story.StoryName);
                    }

                    newStoriesThisRun[storyTitle] = story;
                }

                var chapter = new Chapter
                {
                    Story = story,
                    Post = post,
                    ChapterNumber = chapterNumber
                };

                dbContext.Chapters.Add(chapter);
                _logger.LogInformation("Added chapter {ChapterNumber} to story {StoryName}", chapter.ChapterNumber, story.StoryName);

                post.IsProcessed = true;
            }

            await dbContext.SaveChangesAsync(cancellationToken);
            _logger.LogInformation("Finished sorting unprocessed posts");
        }


        // story title and chapter number extraction based on reddit post title with regex. Regex generated by AI, doesnt really work well with all these different title patterns
        private (string StoryTitle, int ChapterNumber) GetStoryInfo(string title)
        {
            string cleanedTitle = title.Trim();
            int chapterNumber = 1;


            //todo allow creations of more patterns
            var patterns = new[]
                {
                    new { Pattern = @"Chapter\s*(\d+)", TruncateAfterMatch = true },
                    new { Pattern = @"Part\s*(\d+)", TruncateAfterMatch = true },
                    new { Pattern = @"Ch\.?\s*(\d+)", TruncateAfterMatch = true },
                    new { Pattern = @"\b(\d+)[\:\-]", TruncateAfterMatch = false }, // "68:" or "92-"
                    new { Pattern = @"\|\s*(\d+)", TruncateAfterMatch = false }, // [Story | 6. Something]
                    new { Pattern = @"\((\d+)\/\d+\)", TruncateAfterMatch = false }, // (3/3)
                    new { Pattern = @"\-(\d+)\-", TruncateAfterMatch = false } // -92-
                };

            int? foundChapterNumber = null;
            int truncateIndex = cleanedTitle.Length;

            foreach (var patternInfo in patterns)
            {
                var regex = new Regex(patternInfo.Pattern, RegexOptions.IgnoreCase);
                var match = regex.Match(cleanedTitle);

                if (match.Success)
                {
                    string numberPart = match.Groups[1].Value;

                    if (int.TryParse(numberPart, out int num))
                    {
                        foundChapterNumber = num;
                    }

                    if (patternInfo.TruncateAfterMatch)
                    {
                        truncateIndex = Math.Min(truncateIndex, match.Index);
                    }

                    break;
                }
            }

            chapterNumber = foundChapterNumber ?? 1;

            string storyTitle = cleanedTitle.Substring(0, truncateIndex).Trim();

            // If title is completely in brackets
            var bracketMatch = Regex.Match(storyTitle, @"^\[(.*?)\]$");
            if (bracketMatch.Success)
            {
                var parts = bracketMatch.Groups[1].Value.Split('|');
                storyTitle = parts[0].Trim();
            }
            else
            {
                // Remove any [] or ()
                storyTitle = Regex.Replace(storyTitle, @"[\[\(].*?[\]\)]", "");
            }

            storyTitle = storyTitle.Replace(":", "").Replace("|", "").Replace("-", " ").Trim();
            storyTitle = Regex.Replace(storyTitle, @"\s{2,}", " ");

            return (storyTitle, chapterNumber);
        }
    }
}
